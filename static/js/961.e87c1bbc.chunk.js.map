{"version":3,"file":"static/js/961.e87c1bbc.chunk.js","mappings":"sMAgFA,UA1EqB,WAAO,IAAD,EACzB,GAAwCA,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAGFE,EAAgB,WAFLC,EAAAA,EAAAA,MAEiBC,aAAZ,QAAqB,IACvCC,EAAS,GACTC,EAAY,GACZC,EAAO,GACPC,EAAa,GAoBjB,OAlBAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBV,GAASW,MAAK,SAAAC,GAAI,OAAIb,EAAgBa,EAApB,GACvC,GAAE,CAACZ,IAEAF,IACFO,EAASP,EAAaO,OAAOQ,OACzBf,EAAaO,OAAOS,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IAAeC,KAAK,MAChD,2EAEJX,EAAS,WAAmC,GAA5BR,EAAaoB,cAAmBC,QAAQ,GAA/C,KAETZ,EAAOT,EAAasB,aAAaC,OAAO,EAAG,GAE3Cb,EAAaV,EAAawB,YAAb,0CAC0BxB,EAAawB,aAChD,uCAIJxB,IACE,4BACE,SAAC,KAAD,CAAMyB,GAAIrB,EAAV,6BACA,4BACE,gBACEsB,IAAKhB,EACLiB,IAAK3B,EAAa4B,MAClBC,MAAM,MACNC,OAAO,SAET,0BACG9B,EAAa4B,MADhB,KACyBnB,EADzB,QAGA,wCAAgBD,MAChB,qCACA,uBAAIR,EAAa+B,YACjB,mCACA,uBAAIxB,QAEN,mBAEA,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMkB,GAAG,OAAOnB,MAAOF,EAAvB,qBAIF,yBACE,SAAC,KAAD,CAAMqB,GAAG,UAAUnB,MAAOF,EAA1B,2BAKJ,mBAEA,SAAC,EAAA4B,SAAD,CAAUC,UAAU,+DAApB,UACE,SAAC,KAAD,QAKT,C,+LC5EDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAICC,EAAoB,mCAAG,0FACrB,sBADqB,SAGXT,EAAAA,EAAAA,IAAA,UAFV,sBAEU,YAAqBC,IAHV,cAG5BS,EAH4B,yBAK3BA,EAAS9B,KAAK+B,SALa,2CAAH,qDAQpBC,EAAgB,mCAAG,WAAMC,GAAN,6EACjB,gBADiB,SAGPb,EAAAA,EAAAA,IAAA,UAFV,gBAEU,YAAqBC,EAArB,kBAA2CY,IAHpC,cAGxBH,EAHwB,yBAKvBA,EAAS9B,KAAK+B,SALS,2CAAH,sDAQhBjC,EAAmB,mCAAG,WAAMV,GAAN,gFAC3B8C,EAD2B,iBACV9C,GADU,SAGVgC,EAAAA,EAAAA,IAAA,UAAac,EAAb,YAAqBb,IAHX,cAG3BS,EAH2B,yBAK1BA,EAAS9B,MALiB,2CAAH,sDAQnBmC,EAAmB,mCAAG,WAAM/C,GAAN,gFAC3B8C,EAD2B,iBACV9C,EADU,qBAGVgC,EAAAA,EAAAA,IAAA,UAAac,EAAb,YAAqBb,IAHX,cAG3BS,EAH2B,yBAK1BA,EAAS9B,KAAKoC,MALY,2CAAH,sDAQnBC,EAAmB,mCAAG,WAAMjD,GAAN,gFAC3B8C,EAD2B,iBACV9C,EADU,qBAGVgC,EAAAA,EAAAA,IAAA,UAAac,EAAb,YAAqBb,IAHX,cAG3BS,EAH2B,yBAK1BA,EAAS9B,KAAK+B,SALY,2CAAH,qD","sources":["pages/MovieDetails/MovieDetails.jsx","services/themoviedb-api.js"],"sourcesContent":["// Libs\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n// Srvices\nimport { getMovieDetailsById } from '../../services/themoviedb-api';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backLinkLocation = location.state ?? '/';\n  let genres = '';\n  let userScore = '';\n  let year = '';\n  let posterPath = '';\n\n  useEffect(() => {\n    getMovieDetailsById(movieId).then(data => setMovieDetails(data));\n  }, [movieId]);\n\n  if (movieDetails) {\n    genres = movieDetails.genres.length\n      ? movieDetails.genres.map(item => item.name).join(', ')\n      : \"Unfortunately, we don't have information about the genres of this movie.\";\n\n    userScore = `${(movieDetails.vote_average * 10).toFixed(0)}%`;\n\n    year = movieDetails.release_date.substr(0, 4);\n\n    posterPath = movieDetails.poster_path\n      ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n      : 'https://via.placeholder.com/200x300';\n  }\n\n  return (\n    movieDetails && (\n      <div>\n        <Link to={backLinkLocation}>â¬… go back</Link>\n        <div>\n          <img\n            src={posterPath}\n            alt={movieDetails.title}\n            width=\"200\"\n            height=\"300\"\n          />\n          <h1>\n            {movieDetails.title} ({year})\n          </h1>\n          <p>User Score: {userScore}</p>\n          <p>Overview</p>\n          <p>{movieDetails.overview}</p>\n          <p>Genres</p>\n          <p>{genres}</p>\n        </div>\n        <hr />\n\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={backLinkLocation}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={backLinkLocation}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n        <hr />\n\n        <Suspense fallback={<div>Loading additional information...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    )\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: 'bdb5e5a669f604b5ce5232529fdedd0b',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getDayTrendingMovies = async () => {\n  const path = '/trending/movie/day';\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getMoviesByTitle = async query => {\n  const path = '/search/movie';\n\n  const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async movieId => {\n  const path = `/movie/${movieId}`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data;\n};\n\nexport const getMovieCreditsById = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.cast;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n"],"names":["useState","movieDetails","setMovieDetails","movieId","useParams","backLinkLocation","useLocation","state","genres","userScore","year","posterPath","useEffect","getMovieDetailsById","then","data","length","map","item","name","join","vote_average","toFixed","release_date","substr","poster_path","to","src","alt","title","width","height","overview","Suspense","fallback","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getDayTrendingMovies","response","results","getMoviesByTitle","query","path","getMovieCreditsById","cast","getMovieReviewsById"],"sourceRoot":""}