{"version":3,"file":"static/js/871.b7b64c7b.chunk.js","mappings":"uKAmBA,UAhBmB,SAAC,GAAmC,IAAD,IAAhCA,KAAQC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,QACpC,OACE,2BACE,yBAAG,WAASD,MACZ,uBAAIC,MAGT,C,qDCYD,UAlBmB,SAAC,GAAc,IAAZF,EAAW,EAAXA,KACpB,OACE,wBACGA,EAAKG,KAAI,SAAAC,GAAI,OACZ,SAAC,UAAD,CAA0BJ,KAAMI,GAAfA,EAAKC,GADV,KAKnB,C,uGCuBD,UA1BgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IAEbI,EAAAA,EAAAA,qBAAoBH,GACjBI,MAAK,SAAAf,GAAI,OAAIQ,EAAWR,EAAf,IACTgB,SAAQ,kBAAMN,GAAa,EAAnB,GACZ,GAAE,CAACC,KAGF,gCACGF,IAAa,SAAC,UAAD,IAEO,KAAb,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASU,UACR,uBAAG,kDAGJV,IAAW,SAAC,UAAD,CAAYP,KAAMO,MAGnC,C,0RC/BDW,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAICC,EAAoB,mCAAG,0FACrB,sBADqB,SAGXT,EAAAA,EAAAA,IAAA,UAFV,sBAEU,YAAqBC,IAHV,cAG5BS,EAH4B,yBAK3BA,EAAS5B,KAAK6B,SALa,2CAAH,qDAQpBC,EAAgB,mCAAG,WAAMC,GAAN,6EACjB,gBADiB,SAGPb,EAAAA,EAAAA,IAAA,UAFV,gBAEU,YAAqBC,EAArB,kBAA2CY,IAHpC,cAGxBH,EAHwB,yBAKvBA,EAAS5B,KAAK6B,SALS,2CAAH,sDAQhBG,EAAmB,mCAAG,WAAMrB,GAAN,gFAC3BsB,EAD2B,iBACVtB,GADU,SAGVO,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAHX,cAG3BS,EAH2B,yBAK1BA,EAAS5B,MALiB,2CAAH,sDAQnBkC,EAAgB,mCAAG,WAAMvB,GAAN,gFACxBsB,EADwB,iBACPtB,EADO,qBAGPO,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAHd,cAGxBS,EAHwB,yBAKvBA,EAAS5B,KAAKmC,MALS,2CAAH,sDAQhBrB,EAAmB,mCAAG,WAAMH,GAAN,gFAC3BsB,EAD2B,iBACVtB,EADU,qBAGVO,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAHX,cAG3BS,EAH2B,yBAK1BA,EAAS5B,KAAK6B,SALY,2CAAH,qD","sources":["components/ReviewItem/ReviewItem.jsx","components/ReviewList/ReviewList.jsx","pages/Reviews/Reviews.jsx","services/themoviedb-api.js"],"sourcesContent":["// Libs\nimport PropTypes from 'prop-types';\n\nconst RewiewItem = ({ data: { author, content } }) => {\n  return (\n    <li>\n      <p>Author: {author}</p>\n      <p>{content}</p>\n    </li>\n  );\n};\n\nRewiewItem.propTypes = {\n  data: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }),\n};\n\nexport default RewiewItem;\n","// Libs\nimport RewiewItem from 'components/ReviewItem/ReviewItem';\nimport PropTypes from 'prop-types';\n\nconst RewiewList = ({ data }) => {\n  return (\n    <ul>\n      {data.map(item => (\n        <RewiewItem key={item.id} data={item} />\n      ))}\n    </ul>\n  );\n};\n\nRewiewList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default RewiewList;\n","// Libs\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n// Services\nimport { getMovieReviewsById } from '../../services/themoviedb-api';\n// Components\nimport Loader from 'components/Loader/Loader';\nimport RewiewList from 'components/ReviewList/ReviewList';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getMovieReviewsById(movieId)\n      .then(data => setReviews(data))\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {reviews?.length === 0 && (\n        <p>We don't have any reviews for this movie yet.</p>\n      )}\n\n      {reviews && <RewiewList data={reviews} />}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: 'bdb5e5a669f604b5ce5232529fdedd0b',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getDayTrendingMovies = async () => {\n  const path = '/trending/movie/day';\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getMoviesByTitle = async query => {\n  const path = '/search/movie';\n\n  const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async movieId => {\n  const path = `/movie/${movieId}`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data;\n};\n\nexport const getMovieCastById = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.cast;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n"],"names":["data","author","content","map","item","id","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieReviewsById","then","finally","length","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getDayTrendingMovies","response","results","getMoviesByTitle","query","getMovieDetailsById","path","getMovieCastById","cast"],"sourceRoot":""}