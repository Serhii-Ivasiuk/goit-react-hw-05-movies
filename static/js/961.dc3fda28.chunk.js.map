{"version":3,"file":"static/js/961.dc3fda28.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.jsx","services/themoviedb-api.js"],"sourcesContent":["// Libs\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { BeatLoader } from 'react-spinners';\n// Services\nimport { getMovieDetailsById } from '../../services/themoviedb-api';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backLinkLocation = location.state?.from ?? '/';\n  let genres = '';\n  let userScore = '';\n  let year = '';\n  let posterPath = '';\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getMovieDetailsById(movieId)\n      .then(data => setMovieDetails(data))\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  if (movieDetails) {\n    genres = movieDetails.genres.length\n      ? movieDetails.genres.map(item => item.name).join(', ')\n      : \"Unfortunately, we don't have information about the genres of this movie.\";\n\n    userScore = `${(movieDetails.vote_average * 10).toFixed(0)}%`;\n\n    year = movieDetails.release_date.substr(0, 4);\n\n    posterPath = movieDetails.poster_path\n      ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n      : 'https://via.placeholder.com/200x300';\n  }\n\n  return (\n    <>\n      {isLoading && <BeatLoader color=\"#36d7b7\" />}\n\n      {movieDetails && (\n        <div>\n          <Link to={backLinkLocation}>â¬… go back</Link>\n          <div>\n            <img\n              src={posterPath}\n              alt={movieDetails.title}\n              width=\"200\"\n              height=\"300\"\n            />\n            <h1>\n              {movieDetails.title} ({year})\n            </h1>\n            <p>User Score: {userScore}</p>\n            <p>Overview</p>\n            <p>{movieDetails.overview}</p>\n            <p>Genres</p>\n            <p>{genres}</p>\n          </div>\n          <hr />\n\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <Link to=\"cast\" state={{ from: backLinkLocation }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={{ from: backLinkLocation }}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <hr />\n        </div>\n      )}\n\n      <Suspense fallback={<BeatLoader color=\"#36d7b7\" />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: 'bdb5e5a669f604b5ce5232529fdedd0b',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getDayTrendingMovies = async () => {\n  const path = '/trending/movie/day';\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getMoviesByTitle = async query => {\n  const path = '/search/movie';\n\n  const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async movieId => {\n  const path = `/movie/${movieId}`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data;\n};\n\nexport const getMovieCreditsById = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.cast;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n"],"names":["useState","movieDetails","setMovieDetails","isLoading","setIsLoading","movieId","useParams","backLinkLocation","useLocation","state","from","genres","userScore","year","posterPath","useEffect","getMovieDetailsById","then","data","finally","length","map","item","name","join","vote_average","toFixed","release_date","substr","poster_path","color","to","src","alt","title","width","height","overview","Suspense","fallback","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getDayTrendingMovies","response","results","getMoviesByTitle","query","path","getMovieCreditsById","cast","getMovieReviewsById"],"sourceRoot":""}