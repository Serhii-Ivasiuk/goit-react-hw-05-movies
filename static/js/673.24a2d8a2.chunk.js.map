{"version":3,"file":"static/js/673.24a2d8a2.chunk.js","mappings":"+LA+BA,UAzBmB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,EAAAC,KAAD,UACGH,EAAKI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACR,yBACE,SAAC,EAAAC,WAAD,CAAYC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMT,GAAhD,SACGK,KAFID,EADD,KASf,C,sIChBYF,EAAOQ,EAAAA,EAAAA,GAAH,mFAMJJ,GAAaI,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,if,iHC+BvB,UA9Ba,WACX,OAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IAEbE,EAAAA,EAAAA,wBACGC,MAAK,SAAApB,GAAI,OAAIe,EAAUf,EAAd,IACTqB,OAAM,SAAAC,GAAK,OACVC,EAAAA,GAAAA,MAAY,gDADF,IAGXC,SAAQ,kBAAMP,GAAa,EAAnB,GACZ,GAAE,KAGD,gCACGD,IAAa,SAAC,UAAD,IAEbF,IACC,iCACE,SAAC,EAAAW,QAAD,UAAS,oBAET,SAAC,UAAD,CAAYzB,KAAMc,SAK3B,C,mFCpCYW,E,QAAUd,EAAAA,GAAH,+C,0RCDpBe,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAICf,EAAoB,mCAAG,0FACrB,sBADqB,SAGXO,EAAAA,EAAAA,IAAA,UAFV,sBAEU,YAAqBC,IAHV,cAG5BQ,EAH4B,yBAK3BA,EAASnC,KAAKoC,SALa,2CAAH,qDAQpBC,EAAgB,mCAAG,WAAMC,GAAN,6EACjB,gBADiB,SAGPZ,EAAAA,EAAAA,IAAA,UAFV,gBAEU,YAAqBC,EAArB,kBAA2CW,IAHpC,cAGxBH,EAHwB,yBAKvBA,EAASnC,KAAKoC,SALS,2CAAH,sDAQhBG,EAAmB,mCAAG,WAAMC,GAAN,gFAC3BC,EAD2B,iBACVD,GADU,SAGVd,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAHX,cAG3BQ,EAH2B,yBAK1BA,EAASnC,MALiB,2CAAH,sDAQnB0C,EAAgB,mCAAG,WAAMF,GAAN,gFACxBC,EADwB,iBACPD,EADO,qBAGPd,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAHd,cAGxBQ,EAHwB,yBAKvBA,EAASnC,KAAK2C,MALS,2CAAH,sDAQhBC,EAAmB,mCAAG,WAAMJ,GAAN,gFAC3BC,EAD2B,iBACVD,EADU,qBAGVd,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAHX,cAG3BQ,EAH2B,yBAK1BA,EAASnC,KAAKoC,SALY,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","components/MoviesList/MoviesList.styled.jsx","pages/Home/Home.jsx","pages/Home/Home.styled.jsx","services/themoviedb-api.js"],"sourcesContent":["// Libs\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n// Styled components\nimport { List, StyledLink } from './MoviesList.styled';\n\nconst MoviesList = ({ data }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {data.map(({ id, title }) => (\n        <li key={id}>\n          <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </StyledLink>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesList;\n","// Libs\nimport styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const StyledLink = styled(Link)`\n  display: block;\n  padding: 8px 20px;\n  font-size: 20px;\n  letter-spacing: 2px;\n  border-radius: 8px;\n  border-left: 8px solid #f05d22;\n  outline: 3px solid rgba(0, 0, 0, 0.15);\n  transition: 0.2s color cubic-bezier(0.4, 0, 0.2, 1),\n    0.2s border-color cubic-bezier(0.4, 0, 0.2, 1),\n    0.2s color cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    border-color: #afe5e5;\n    color: #afe5e5;\n    box-shadow: 0 0 8px rgba(94, 188, 214, 0.451);\n  }\n`;\n","// Libs\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\n// Services\nimport { getDayTrendingMovies } from '../../services/themoviedb-api';\n// Components\nimport Loader from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\n// Styled components\nimport { Heading } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getDayTrendingMovies()\n      .then(data => setMovies(data))\n      .catch(error =>\n        toast.error('Something went wrong, please try again later.')\n      )\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {movies && (\n        <>\n          <Heading>Trending today</Heading>\n\n          <MoviesList data={movies} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","// Libs\nimport styled from '@emotion/styled';\n\nexport const Heading = styled.h1`\n  margin-bottom: 20px;\n`;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: 'bdb5e5a669f604b5ce5232529fdedd0b',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getDayTrendingMovies = async () => {\n  const path = '/trending/movie/day';\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getMoviesByTitle = async query => {\n  const path = '/search/movie';\n\n  const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async movieId => {\n  const path = `/movie/${movieId}`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data;\n};\n\nexport const getMovieCastById = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.cast;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n"],"names":["data","location","useLocation","List","map","id","title","StyledLink","to","state","from","styled","Link","useState","movies","setMovies","isLoading","setIsLoading","useEffect","getDayTrendingMovies","then","catch","error","toast","finally","Heading","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","response","results","getMoviesByTitle","query","getMovieDetailsById","movieId","path","getMovieCastById","cast","getMovieReviewsById"],"sourceRoot":""}