{"version":3,"file":"static/js/961.8dd756e0.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.jsx","pages/MovieDetails/MovieDetails.styled.jsx","services/themoviedb-api.js"],"sourcesContent":["// Libs\nimport { Suspense, useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n// Services\nimport { getMovieDetailsById } from '../../services/themoviedb-api';\n// Components\nimport Loader from 'components/Loader/Loader';\n// Styled components\nimport {\n  Page,\n  MovieCard,\n  MoviePoster,\n  MovieInfo,\n  InfoTitle,\n  SubpagesLinkList,\n  StyledNavLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backLinkLocation = location.state?.from ?? '/';\n  let genres = '';\n  let userScore = '';\n  let year = '';\n  let posterPath = '';\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getMovieDetailsById(movieId)\n      .then(data => setMovieDetails(data))\n      .catch(error =>\n        toast.error('Something went wrong, please try again later.')\n      )\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  if (movieDetails) {\n    genres = movieDetails.genres.length\n      ? movieDetails.genres.map(item => item.name).join(', ')\n      : \"Unfortunately, we don't have information about the genres of this movie.\";\n\n    userScore = `${(movieDetails.vote_average * 10).toFixed(0)}%`;\n\n    year = movieDetails.release_date.substr(0, 4);\n\n    posterPath = movieDetails.poster_path\n      ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n      : 'https://via.placeholder.com/200x300';\n  }\n\n  return (\n    <Page>\n      {isLoading && <Loader />}\n\n      {movieDetails && (\n        <>\n          <StyledNavLink to={backLinkLocation}>â¬… go back</StyledNavLink>\n          <MovieCard>\n            <MoviePoster\n              src={posterPath}\n              alt={movieDetails.title}\n              width=\"200\"\n              height=\"300\"\n            />\n            <MovieInfo>\n              <h1>\n                {movieDetails.title} ({year})\n              </h1>\n              <p>User Score: {userScore}</p>\n              <InfoTitle>Overview</InfoTitle>\n              <p>{movieDetails.overview}</p>\n              <InfoTitle>Genres</InfoTitle>\n              <p>{genres}</p>\n            </MovieInfo>\n          </MovieCard>\n\n          <InfoTitle>Additional information</InfoTitle>\n          <SubpagesLinkList>\n            <li>\n              <StyledNavLink to=\"cast\" state={{ from: backLinkLocation }}>\n                Cast\n              </StyledNavLink>\n            </li>\n            <li>\n              <StyledNavLink to=\"reviews\" state={{ from: backLinkLocation }}>\n                Reviews\n              </StyledNavLink>\n            </li>\n          </SubpagesLinkList>\n        </>\n      )}\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </Page>\n  );\n};\n\nexport default MovieDetails;\n","// Libs\nimport styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Page = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  display: block;\n  width: 140px;\n  text-align: center;\n  padding: 8px 20px;\n  border: 2px solid #153341;\n  border-radius: 8px;\n  text-transform: uppercase;\n  font-weight: 700;\n  transition: background-color 0.2s cubic-bezier(0.4, 0, 0.2, 1),\n    border-color 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n\n  &.active {\n    background-color: #0e222b;\n  }\n\n  &:hover,\n  &:focus {\n    color: #afe5e5;\n  }\n`;\n\nexport const MovieCard = styled.div`\n  overflow: hidden;\n  border: 3px solid rgba(0, 0, 0, 0.15);\n  border-radius: 8px;\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n  }\n`;\n\nexport const MoviePoster = styled.img`\n  object-fit: cover;\n\n  @media screen and (max-width: 767.98px) {\n    width: 100%;\n  }\n`;\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 20px;\n  border-top: 4px solid #f05d22;\n\n  @media screen and (min-width: 768px) {\n    border-top: 0;\n    border-left: 4px solid #f05d22;\n  }\n`;\n\nexport const InfoTitle = styled.div`\n  font-weight: 700;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n  color: #f05d22;\n`;\n\nexport const SubpagesLinkList = styled.ul`\n  display: flex;\n  gap: 12px;\n  padding: 8px 0;\n`;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: 'bdb5e5a669f604b5ce5232529fdedd0b',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getDayTrendingMovies = async () => {\n  const path = '/trending/movie/day';\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getMoviesByTitle = async query => {\n  const path = '/search/movie';\n\n  const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n\n  return response.data.results;\n};\n\nexport const getMovieDetailsById = async movieId => {\n  const path = `/movie/${movieId}`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data;\n};\n\nexport const getMovieCastById = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.cast;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n"],"names":["useState","movieDetails","setMovieDetails","isLoading","setIsLoading","movieId","useParams","backLinkLocation","useLocation","state","from","genres","userScore","year","posterPath","useEffect","getMovieDetailsById","then","data","catch","error","toast","finally","length","map","item","name","join","vote_average","toFixed","release_date","substr","poster_path","Page","StyledNavLink","to","MovieCard","MoviePoster","src","alt","title","width","height","MovieInfo","InfoTitle","overview","SubpagesLinkList","Suspense","fallback","styled","NavLink","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getDayTrendingMovies","response","results","getMoviesByTitle","query","path","getMovieCastById","cast","getMovieReviewsById"],"sourceRoot":""}